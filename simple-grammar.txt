
module
    : ( module_item )+
    ;

module_item
    : namespace_item
    | import_statement
    | include_statement
    | start_definition
    ;

start_definition
    : 'start' function_body
    ;

import_statement
    : 'import' formatted_string 'as' IDENTIFIER
    ;

include_statement
    : 'include' formatted_string
    ;

namespace_item
    : namespace_scope_operator
    | namespace_definition
    | class_definition
    ;

namespace_scope_operator
    : 'private'
    | 'public'
    ;

class_scope_operator
    : namespace_scope_operator
    | 'protected'
    ;

literal_type_name
    : 'float'
    | 'integer'
    | 'string'
    | 'boolean'
    | 'nothing'
    | 'list'
    | 'dict'
    ;

type_name
    : literal_type_name
    | compound_name
    ;

formatted_string
    : LITERAL_DSTR ( expression_list )?
    ;

string_literal
    : LITERAL_SSTR
    | formatted_string
    ;

literal_value
    : LITERAL_FLOAT
    | LITERAL_INTEGER
    | LITERAL_BOOL
    | string_literal
    ;

var_decl
    : type_name IDENTIFIER
    ;

function_parm
    : '(' ( type_name IDENTIFIER ( ',' type_name IDENTIFIER )* )? ')'
    ;

assignment_item
    : expression
    | list_init
    ;

var_definition
    : ( 'const' )? var_decl ( '=' assignment_item )?
    ;

list_init_str
    : LITERAL_DSTR
    | LITERAL_SSTR
    ;

list_init_element
    : list_init_str ':' assignment_item
    | assignment_item
    ;

list_init
    : '[' list_init_element ( ',' list_init_element )* ']'
    ;

array_param_item
    : expression
    | string_literal
    ;

array_param
    : '[' array_param_item ']'
    ;

array_param_list
    : array_param (array_param)*
    ;

array_reference
    : IDENTIFIER array_param_list
    ;

function_reference
    : compound_name expression_list compound_name_list
    ;

create_reference
    : IDENTIFIER ( '.' IDENTIFIER )* '.' 'create' expression_list
    ;

destroy_reference
    : IDENTIFIER ( '.' IDENTIFIER )* '.' 'destroy'
    ;

compound_name
    : IDENTIFIER ( '.' IDENTIFIER )*
    ;

compound_name_list
    : '(' ( compound_name (',' compound_name )* )? ')'
    ;

compound_ref_item
    : IDENTIFIER
    | array_reference
    ;

compound_reference
    : compound_ref_item ( '.' compound_ref_item )*
    ;

cast_statement
    : type_name '(' expression ')'
    ;

expression_list
    : '(' ( expression ( ',' expression )* )? ')'
    ;

namespace_definition
    : 'namespace' IDENTIFIER '{' ( namespace_item )+ '}'
    ;

alias_definition
    : compound_name 'as' IDENTIFIER
    ;

class_inheritance_item
    : (class_scope_operator)? alias_definition
    ;

class_inheritance_list
    : '(' ( class_inheritance_item (',' class_inheritance_item )* )? ')'
    ;

class_definition
    : 'class' IDENTIFIER ( class_inheritance_list )? class_body
    ;

class_body_item
    : class_scope_operator
    | var_decl
    | alias_definition
    | function_definition
    | create_definition
    | destroy_definition
    ;

class_body
    : '{' ( class_body_item )+ '}'
    ;

function_definition
    : IDENTIFIER function_parm function_parm ( function_body )?
    ;

create_definition
    : 'create' function_parm ( function_body )?
    ;

destroy_definition
    : 'destroy' ( function_body )?
    ;

function_body
    : '{' ( function_body_element )* '}'
    ;

loop_body
    : '{' ( loop_body_element )* '}'
    ;

assignment_statement
    : compound_reference '=' assignment_item
    | compound_reference '+=' expression
    | compound_reference '-=' expression
    | compound_reference '*=' expression
    | compound_reference '/=' expression
    | compound_reference '%=' expression
    ;

inline_statement
    : 'inline' '{' LITERAL_TEXT '}'
    ;

function_body_element
    : var_definition
    | function_reference
    | create_reference
    | destroy_reference
    | while_clause
    | do_clause
    | for_clause
    | if_clause
    | try_clause
    | assignment_statement
    | inline_statement
    | type_statement
    | return_statement
    | raise_statement
    | trace_statement
    | print_statement
    | exit_statement
    | function_body
    ;

loop_body_element
    : function_body_element
    | break_statement
    | continue_statement
    | yield_statement
    | loop_body
    ;


break_statement
    : 'break'
    ;

continue_statement
    : 'continue'
    ;

yield_statement
    : 'yield' '(' compound_reference ')'
    ;

type_statement
    : 'type' '(' compound_reference ')'
    ;

return_statement
    : 'return'
    ;

raise_statement
    : 'raise' '(' IDENTIFIER ',' formatted_string ')'
    ;

trace_statement
    : 'trace' '(' string_literal ')'
    ;

print_statement
    : 'print' ( expression_list )?
    ;

exit_statement
    : 'exit'
    ;

while_definition
    : 'while' ( '(' ( expression )? ')' )?
    ;

while_clause
    : while_definition loop_body
    ;

do_clause
    : 'do' loop_body while_definition
    ;

for_clause
    : 'for' ( '(' ( expression 'as' IDENTIFIER )? ')' )? loop_body
    ;

if_clause
    : 'if' '(' expression ')' function_body ( else_clause )*
        ( final_else_clause )?
    ;

else_clause
    : 'else' '(' expression ')' function_body
    ;

final_else_clause
    : 'else' ( '(' ')' )? function_body
    ;

try_clause
    : 'try' function_body ( except_clause )* ( final_clause )?
    ;

except_clause
    : 'except' '(' IDENTIFIER ',' IDENTIFIER ')' function_body
    ;

final_clause
    : 'final' '(' IDENTIFIER ')' function_body
    ;

expr_primary
    : literal_value
    | compound_reference
    | cast_statement
    | '(' expression ')'
    ;

expression
    : expr_or
    ;

expr_or
    : expr_and
    | expr_and 'or' expr_or
    | expr_and '|' expr_or
    ;

expr_and
    : expr_equal
    | expr_equal 'and' expr_and
    | expr_equal '&' expr_and
    ;

expr_equal
    : expr_magnitude
    | expr_magnitude 'and' expr_equal
    | expr_magnitude '&' expr_equal
    ;

expr_magnitude
    : expr_term
    | expr_term '>' expr_magnitude
    | expr_term '<' expr_magnitude
    | expr_term '>=' expr_magnitude
    | expr_term '<=' expr_magnitude
    ;

expr_term
    : expr_factor
    | expr_factor '+' expr_term
    | expr_factor '-' expr_term
    ;

expr_factor
    : expr_power
    | expr_power '*' expr_factor
    | expr_power '/' expr_factor
    | expr_power '%' expr_factor
    ;

expr_power
    : expr_unary
    | expr_unary '^' expr_power
    ;

expr_unary
    : expr_primary
    | '!' expr_primary
    | '-' expr_primary
    | 'not' expr_primary
    ;
